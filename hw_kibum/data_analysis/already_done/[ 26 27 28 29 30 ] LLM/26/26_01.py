import openai

# OpenAI API 키 설정
openai.api_key = "YOUR_OPENAI_API_KEY"  
# 발급받은 API 키를 입력하세요.

# Step 1: 제로샷 프롬프트 작성
# 제로샷 프롬프트는 모델에게 예시를 제공하지 않고, 문제를 직접 해결하도록 요청하는 방식입니다.
# 여기서는 입력된 '사고 위치', '사고 유형', '날씨 상태', '사고 원인' 정보를 바탕으로 사고 보고서를 2문장으로 요약하도록 요청합니다.
zero_shot_prompt = """
        모델에게 '사고 위치', '사고 유형', '날씨 상태', '사고 원인'을 입력으로 제공하고, 이를 바탕으로 사고 보고서를 작성하세요.
        입력 데이터를 기반으로 자연스럽게 풀어 2문장으로 요약할 수 있도록 구성하세요.

        - 사고 위치: 서울 강남구
        - 사고 유형: 차량 전복 사고
        - 날씨 상태: 비
        - 사고 원인: 과속
        """
# 제로샷 프롬프트는 예시 없이 모델에게 문제를 직접 풀도록 요청합니다. 
# 이 프롬프트는 입력된 데이터를 바탕으로 2문장으로 사고 보고서를 작성하도록 모델에게 요청하는 내용입니다.

# TODO: 다음의 결과와 같이 '사고 위치', '사고 유형', '날씨 상태', '사고 원인'을 입력받아, 2문장의 고정된 형태의 보고서 결과를 만들 수 있도록 프롬프트를 작성하세요.
"""
퓨샷을 통한 생성 결과:
비 오는 날씨에 서울 강남구에서 차량 전복 사고가 발생했습니다. 과속으로 인해 사고가 발생되었습니다.
"""
# Step 2: 퓨샷 프롬프트 작성
# 퓨샷 프롬프트는 모델에게 몇 가지 예시를 제공한 후, 문제를 해결하는 방식입니다.
# 예시들을 기반으로 유사한 사고 보고서를 작성하도록 모델에게 힌트를 제공합니다.
few_shot_prompt = """
        모델에게 '사고 위치', '사고 유형', '날씨 상태', '사고 원인'을 입력으로 제공하고, 이를 바탕으로 사고 보고서를 작성하도록 유도하는 프롬프트를 설계하세요. 
        모델이 입력 데이터를 자연스럽게 풀어 2문장으로 요약할 수 있도록 구성하세요.

        다음은 교통 사고 보고서 예시입니다:
        1. 사고 위치: 서울 종로구
        사고 유형: 추돌 사고
        날씨 상태: 맑음
        사고 원인: 신호 위반

        보고서 결과:
        맑은 날씨에 서울 종로구에서 추돌 사고가 발생했습니다. 신호위반한 차량으로 인해 사고가 발생되었습니다.

        2. 사고 위치: 부산 서면
        사고 유형: 보행자 사고
        날씨 상태: 흐림
        사고 원인: 무단횡단

        보고서 결과:
        흐린 날씨에 부산 서면에서 보행자 사고가 발생했습니다. 보행자의 무단횡단으로 인해 사고가 발생되었습니다.

        이 형식을 참고하여 아래 정보를 기반으로 새로운 사고 보고서를 작성해줘:
        - 사고 위치: 서울 강남구
        - 사고 유형: 차량 전복 사고
        - 날씨 상태: 비
        - 사고 원인: 과속
        """
# 퓨샷 프롬프트는 모델에게 몇 가지 예시를 제공하여 문제 해결 방식에 대한 힌트를 줍니다.
# 모델이 주어진 예시들을 기반으로 유사한 형식의 사고 보고서를 작성하도록 유도합니다.

# Step 3: 모델 선택 및 요약 생성
# 참고 : https://platform.openai.com/docs/api-reference/chat
def generate(prompt_text, model="gpt-4o-mini", max_tokens=3000):
    """
    주어진 프롬프트를 사용하여 OpenAI GPT 모델로부터 응답을 생성합니다.
    prompt_text: 전달할 프롬프트 텍스트
    model: 사용할 OpenAI GPT 모델 이름 (기본값: gpt-4o-mini)
    max_tokens: 생성할 응답의 최대 토큰 수
    """
    response = openai.chat.completions.create(
        model=model,  # 사용할 모델 이름을 지정 (기본값은 gpt-4o-mini)
        messages=[  # 프롬프트를 메시지로 전달
            {"role": "user", "content": prompt_text}
        ],
        max_tokens=max_tokens,  # 생성할 최대 토큰 수 설정
        temperature=0,  # 창의성 정도를 결정하는 temperature 값 (보고서이므로 최대한 동일한 결과가 나오도록 0으로 설정)
    )
    return response.choices[0].message.content  # 모델의 응답에서 첫 번째 결과 반환

# GPT-4o-mini 모델을 사용하여 프롬프트에 따른 사고 보고서를 생성합니다.
few_result = generate(few_shot_prompt)  # 퓨샷 프롬프트를 사용하여 결과 생성
zero_result = generate(zero_shot_prompt)  # 제로샷 프롬프트를 사용하여 결과 생성

# Step 4: 결과 확인
# 각각의 프롬프트로 생성된 결과를 출력합니다.
print("퓨샷을 통한 생성 결과:", few_result)  # 퓨샷 프롬프트 결과 출력
print("제로샷을 통한 생성 결과:", zero_result)  # 제로샷 프롬프트 결과 출력


#########################################################################


import openai

# OpenAI API 키 설정
openai.api_key = "YOUR_OPENAI_API_KEY"  
# 발급받은 API 키를 입력하세요.

# Step 1: CoT 미적용 프롬프트 작성
# CoT(Chain of Thought) 미적용 프롬프트는 모델에게 각 단계별 사고 없이 바로 문제 해결을 요청하는 방식입니다.
cot_not_applied_prompt = """
당신은 50km 떨어진 도시에 물건을 배달하러 갑니다. 출발 후 첫 번째로 10km를 운전한 후 도로가 막혀 8km를 돌아가야 했습니다. 두 번째로 15km를 더 운전했을 때 또 다른 도로 차단으로 인해 12km를 우회해야 했습니다. 배달 도착 직전 마지막으로 5km를 추가로 우회해야 했습니다.

질문: 배달을 완료하기까지 트럭으로 총 몇 km를 운전했나요?   
"""
# CoT 미적용 프롬프트는 모델이 사고 과정을 거치지 않고 바로 결과를 생성하도록 요청합니다.

# Step 2: CoT 적용 프롬프트 작성
# CoT 적용 프롬프트는 단계별 사고를 거쳐 모델이 문제를 해결하도록 유도합니다.
# 각 단계에서 사고를 명확하게 하고, 이를 바탕으로 최종적인 답을 도출하도록 합니다.
# TODO : 아래의 글을 활용해서 단계별 사고를 구성해 cot가 적용된 프롬프트를 만들어주세요.
"""
상황: 당신은 A에서 B까지 총 60km를 운전해야 합니다. A에서 B까지 가는 도중, 도로 공사로 인해 도로가 폐쇄되어 10km 정도 돌아가야 했습니다. 이후 다시 20km를 운전하던 중 사고로 인해 또 다른 우회로를 찾아야 했고, 이번에는 15km를 돌아가야 했습니다. 하지만 도착 직전에 마지막으로 또 5km 우회해야 했습니다.

문제: A에서 B까지 최종적으로 몇 km를 운전했나요?
"""
cot_applied_prompt = """
상황: 당신은 A에서 B까지 총 60km를 운전해야 합니다. A에서 B까지 가는 도중, 도로 공사로 인해 도로가 폐쇄되어 10km 정도 돌아가야 했습니다. 이후 다시 20km를 운전하던 중 사고로 인해 또 다른 우회로를 찾아야 했고, 이번에는 15km를 돌아가야 했습니다. 하지만 도착 직전에 마지막으로 또 5km 우회해야 했습니다.

문제: A에서 B까지 최종적으로 몇 km를 운전했나요?

단계별 사고:

1. 원래 운전 거리: 60km
2. 첫 번째 우회: +10km → 총 70km
3. 두 번째 우회: +15km → 총 85km
4. 세 번째 우회: +5km → 최종 운전 거리: 90km

이제 단계에 따라 다음의 문제를 해결하세요:

당신은 50km 떨어진 도시에 물건을 배달하러 갑니다. 출발 후 첫 번째로 10km를 운전한 후 도로가 막혀 8km를 돌아가야 했습니다. 두 번째로 15km를 더 운전했을 때 또 다른 도로 차단으로 인해 12km를 우회해야 했습니다. 배달 도착 직전 마지막으로 5km를 추가로 우회해야 했습니다.

질문: 배달을 완료하기까지 트럭으로 총 몇 km를 운전했나요?
"""
# CoT 적용 프롬프트는 모델이 단계별 사고를 하도록 유도하여 더 체계적인 답변을 도출하도록 합니다.

# Step 3: 모델 선택 및 CoT 방식으로 요약 생성
# 참고 : https://platform.openai.com/docs/api-reference/chat
def generate_cot(prompt_text, model="gpt-3.5-turbo", max_tokens=3000):
    """
    주어진 프롬프트를 사용하여 OpenAI GPT 모델로부터 응답을 생성합니다.
    prompt_text: 전달할 프롬프트 텍스트
    model: 사용할 OpenAI GPT 모델 이름 (기본값: gpt-3.5-turbo)
    max_tokens: 생성할 응답의 최대 토큰 수
    """
    response = openai.chat.completions.create(
        model=model,  # 사용할 모델 이름을 지정
        messages=[  # 프롬프트를 메시지로 전달
            {"role": "user", "content": prompt_text}
        ],
        max_tokens=max_tokens,  # 생성할 최대 토큰 수 설정
        temperature=0.7,  # 창의성 정도를 결정하는 temperature 값
    )
    return response.choices[0].message.content  # 모델의 응답에서 첫 번째 결과 반환

# GPT 모델을 사용하여 CoT 적용 및 미적용 방식으로 보고서를 생성합니다.
cot_not_applied_result = generate_cot(cot_not_applied_prompt)  # CoT 미적용 프롬프트 사용
cot_applied_result = generate_cot(cot_applied_prompt)  # CoT 적용 프롬프트 사용

# Step 4: 결과 확인
print("CoT 미적용 결과:\n", cot_not_applied_result)  # CoT 미적용 프롬프트 결과 출력
print("----------------------------------------------------------------------------------------")
print("CoT 적용 결과:\n", cot_applied_result)  # CoT 적용 프롬프트 결과 출력